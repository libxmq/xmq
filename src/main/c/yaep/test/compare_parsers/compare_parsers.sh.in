#!/bin/sh
# @configure_input@
#
# Copyright (c) 1997-2018  Vladimir Makarov <vmakarov@gcc.gnu.org>
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
# CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
# Script to comparison of Bison, Yacc (byacc), YAEP (Yet
# Another Earley Parser), MARPA Earley's parser, and MSTA.  The script
# can find installed MARPA in /usr and /usr/local.  If MARPA parser is
# installed somewhere else then use environment variable MARPA_DIR to
# point its installation directory.
#
# Usage: compare.tst
#
# The script uses Bison, Yacc (byacc), gcc, lex, MARPA.
#

YACC=
if type yacc|fgrep /yacc; then
    YACC=yacc
elif type byacc|fgrep /byacc; then
    YACC=byacc;
fi
BISON=
if type bison|fgrep /bison; then
    BISON=bison
fi
MSTA=
if test -f ./msta; then
    MSTA=./msta
fi

YAEPLIB=../../src/libyaep.a

GCC='@CC@ -O3 -w'
TEST=small_test.i
BIG_TEST=@srcdir@/whole_gcc_test.i
outfile=./a.out

echo This script compares speed of parser generated by Yacc, Bison, Msta, MARPA
echo for parsing real C program.

echo Now test file preparation

cp @srcdir@/test.i $TEST
for i in 0 1 2 3 4 5 6 7 8 9;do cat @srcdir@/test1.i >>$TEST;done

if test x$BISON != x; then
  # BISON
  echo ++++++++Bison: pure parsing
  if $BISON -y @srcdir@/ansic.y && $GCC -I. -I.. -I@srcdir@ -I@top_srcdir@/test -I@top_srcdir@/src @srcdir@/../ticker.c @srcdir@/test_yyparse.c $YAEPLIB -o $outfile && time $outfile <$TEST; then
    echo
  else
    echo Failure with $BISON
    exit 1
  fi
fi

if test x$BISON != x; then
  # BISON
  echo Bison -- Big test
  if $BISON -y @srcdir@/ansic.y && $GCC -I. -I.. -I@srcdir@ -I@top_srcdir@/test -I@top_srcdir@/src @srcdir@/../ticker.c @srcdir@/test_yyparse.c $YAEPLIB -o $outfile && time $outfile <$BIG_TEST; then
    echo
  else
    echo Failure with $BISON on the big test
    exit 1
  fi
fi

if test x$YACC != x; then
  # YACC
  echo ++++++++Yacc: pure parsing
    
  if $YACC @srcdir@/ansic.y && $GCC -I. -I.. -I@srcdir@ -I@top_srcdir@/test -I@top_srcdir@/src @srcdir@/../ticker.c @srcdir@/test_yyparse.c $YAEPLIB -o $outfile && time $outfile <$TEST; then
    echo
  else
    echo Failure with $YACC
    exit 1
  fi
fi

if test x$YACC != x; then
  # YACC
  echo YACC -- Big test
    
  if $YACC @srcdir@/ansic.y && $GCC -I. -I.. -I@srcdir@ -I@top_srcdir@/test -I@top_srcdir@/src @srcdir@/../ticker.c @srcdir@/test_yyparse.c $YAEPLIB -o $outfile && time $outfile <$BIG_TEST; then
    echo
  else
    echo Failure with $YACC on the big test
    exit 1
  fi
fi

if test x$MSTA != x; then
    # MSTA
    echo ++++++++Msta: pure parsing
    if $MSTA -yacc-file-names @srcdir@/ansic.y && $GCC -I. -I.. -I@srcdir@ -I@top_srcdir@/test -I@top_srcdir@/src @srcdir@/../ticker.c @srcdir@/test_yyparse.c $YAEPLIB -o $outfile && time $outfile <$TEST; then
	echo
    else
	echo Failure with $MSTA
	exit 1
    fi
fi

if test x$MSTA != x; then
    # MSTA
    echo Msta -- Big test
    if $MSTA -yacc-file-names @srcdir@/ansic.y && $GCC -I. -I.. -I@srcdir@ -I@top_srcdir@/test -I@top_srcdir@/src @srcdir@/../ticker.c @srcdir@/test_yyparse.c $YAEPLIB -o $outfile && time $outfile <$BIG_TEST; then
	echo
    else
	echo Failure with $MSTA on the big test
	exit 1
    fi
fi

# YAEP (Yet Another Earley Parser)
echo ++++++++YAEP '(Yet Another Earley Parser)': pure parsing

echo No Lookahead
if $GCC -I. -I.. -I@srcdir@ -I@top_srcdir@/test -I@top_srcdir@/src @srcdir@/../ticker.c @srcdir@/test_yaep.c $YAEPLIB -o $outfile && time $outfile 0 0 <$TEST; then
  echo
else
  echo Failure with 'YAEP (Yet Another Earley Parser)'
  exit 1
fi

echo Static Lookahead
if $GCC -I. -I.. -I@srcdir@ -I@top_srcdir@/test -I@top_srcdir@/src @srcdir@/../ticker.c @srcdir@/test_yaep.c $YAEPLIB -o $outfile && time $outfile 1 0 <$TEST; then
  echo
else
  echo Failure with 'YAEP (Yet Another Earley Parser)'
  exit 1
fi

echo Dynamic Lookahead
if $GCC -I. -I.. -I@srcdir@ -I@top_srcdir@/test -I@top_srcdir@/src @srcdir@/../ticker.c @srcdir@/test_yaep.c $YAEPLIB -o $outfile && time $outfile 2 0 <$TEST; then
  echo
else
  echo Failure with 'YAEP (Yet Another Earley Parser)'
  exit 1
fi

echo Static Lookahead -- Big test
if $GCC -I. -I.. -I@srcdir@ -I@top_srcdir@/test -I@top_srcdir@/src @srcdir@/../ticker.c @srcdir@/test_yaep.c $YAEPLIB -o $outfile && time $outfile 1 0 <$BIG_TEST; then
  echo
else
  echo Failure with 'YAEP (Yet Another Earley Parser)'
  exit 1
fi


# MARPA Earley parser
if test x$MARPA_DIR != x \
   || test -f /usr/include/marpa.h \
   && (test -f /usr/lib/libmarpa.a || test -f /usr/lib64/libmarpa.a) \
   || test -f /usr/local/include/marpa.h \
   && (test -f /usr/local/lib/libmarpa.a || test -f /usr/local/lib64/libmarpa.a); then

if test x$MARPA_DIR = x; then
   if  test -f /usr/include/marpa.h \
       && (test -f /usr/lib/libmarpa.a || test -f /usr/lib64/libmarpa.a); then
       MARPA_DIR=/usr
   else
       MARPA_DIR=/usr/local
   fi
fi

echo ++++++++MARPA Earley parser from $MARPA_DIR: pure parsing

MARPA_YACC_FILE=@srcdir@/test.y
MARPA_TEST=marpa_test.c

if test x$MSTA != x; then
    $MSTA $MARPA_YACC_FILE 2>&1 | fgrep -v 'look ahead'
elif test x$BISON != x; then
    $BISON -y $MARPA_YACC_FILE && mv y.tab.c $MARPA_TEST
elif test x$YACC != x; then
    $YACC $MARPA_YACC_FILE && mv y.tab.c $MARPA_TEST
else
    echo We need yacc, bison, or msta to test MARPA.
fi

export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$MARPA_DIR/lib:$MARPA_DIR/lib64
if test -f $MARPA_TEST && $GCC -I. -I.. -I@srcdir@ -I@top_srcdir@/test -I@top_srcdir@/src -I$MARPA_DIR/include -L$MARPA_DIR/lib -L$MARPA_DIR/lib64 @srcdir@/../ticker.c $MARPA_TEST $YAEPLIB -lmarpa -o $outfile && time $outfile <$TEST; then
  echo
  echo MARPA Earley parser -- Big test
  if test x$MARPA_BIG_TEST != x; then
     if time $outfile < $BIG_TEST; then
	 echo
     else
	 echo Failure with MARPA parser on the big test
	 exit 1
     fi
  else
      echo To test MARPA on the biggest file, define env. variable MARPA_BIG_TEST.
      echo Please be aware -- MARPA uses 30GB for this test.
  fi
else
  echo Failure with MARPA parser
  exit 1
fi
fi

rm -f $outfile
rm -f $MARPA_TEST y.tab.c $TEST
exit 0
