!DOCTYPE = html
html {
    head {
        meta(http-equiv=content-type content='text/html; charset=UTF-8')
        title = libxmq
        link(type=text/css href=resources/style.css rel=stylesheet)
        link(type=text/css href=resources/xmq.css rel=stylesheet)
        script(type=text/javascript src=resources/code.js) = ''
        meta(name=viewport content='width=device-width' initial-scale=1.0)
    }
    body {
        h1 = 'XMQ - a new language for xml/html (+json)'
        i {
            'by Fredrik Öhrström (last updated '
            &DATE;
            ')'
        }
        br
        button(onClick='goDark();') = 'Dark Mode'
        ' '
        button(onClick='goLight();') = 'Light Mode'
        br
        p = 'The xmq format is easier for a human to read and write than xml/html yet it
             captures exactly the xml/html content. It can always be safely pretty printed
             without introducing significant whitespace. The file-suffix htmq is used
             when working with html in the xmq format. There is even a reasonable mapping
             between json and xmq.'
        p {
          'You can use the standalone '
          i = xmq
          ' tool to convert between xmq/xml/htmq/html/json or link '
          i = libxmq
          ' or include '
          i = xmq.c
          ' to use xmq directly from your program.'
        }
        div {
            a(href=https://github.com/libxmq/xmq) = [Github]
            &nbsp;&nbsp;
            a(href=xmq.pdf) = [Grammar]
            &nbsp;&nbsp;
            a(href=api/index.html) = [API]
        }
        p {
            'Let us begin by looking at a shiporder expressed in both xmq and xml.'
            &nbsp;
            &nbsp;
            a(href=resources/shiporder.xmq)=shiporder.xmq
            &nbsp;
            &nbsp;
            a(href=resources/shiporder.xml)=shiporder.xml
        }
        p {
          'Download the xmq binary for your platform and run: '
          span(class=code) = 'xmq shiporder.xml'
        }
        p {
          'Or: '
          span(class=code) = 'xmq-less shiporder.xmq'
        }
        p {
          'To convert to xml: '
          span(class=code) = 'xmq shiporder.xmq to_xml'
        }
        &SHIPORDER_XMQ;
        ' '
        pre(class = 'xmq xmq_light w40')
        {
            &SHIPORDER_XML;
            &#10;
            &#10;
        }
        p {
            'And another simple data structure.'
            &nbsp;
            &nbsp;
            a(href=resources/car.xmq)=car.xmq
            &nbsp;
            &nbsp;
            a(href=resources/car.xml)=car.xml
        }
        &CAR_XMQ;
        ' '
        pre(class = 'xmq xmq_light w40')
        {
            &CAR_XML;
        }
        p = 'This hierarchical style looks familiar, however note:'
        ul{
            li = 'Safe values after = can be stored as plain text (eg 889923 container), no quoting needed!'
            li = '''Unsafe values with newlines, whitespace or ( ) { } ' " or leading = & // /* must be quoted.'''
            li = 'Two single quotes always mean the empty string (eg sailing).'
            li = 'In multiline quotes, the incindental indentation is removed (eg address).'
            li = 'In multiline quotes, any leading/ending whitespaces is removed.'
            li = 'Quotes containing quotes are quoted using n+1 single quotes (eg coord).'
            li = 'Single line comments use // and multi line comments use /* */.'
            li = 'Comments containing comments are commented using n+1 slashes (eg ///* *///).'
        }
        p = 'This means that you can quote any block of text with enough single quotes and you
             can comment any block of text with enough slashes.'

        ul {
            li {
                '''Note: key=value is just a syntatic sugar for: key{'value'}'''
                &nbsp;
                &nbsp;
                a(href=resources/sugar.xmq)=sugar.xmq
            }
        }
        p = 'All the chairs below have the same value: 123. Remember that leading/ending whitespace is trimmed from quotes.
             But the chaise has a leading space and 3 ending space.'
        pre(class = 'xmq xmq_light w40')
        {
            &SUGAR_XMQ;
        }
        p {
          span(class=code) = 'xmq sugar.xmq to_xml'
        }
        pre(class = 'xmq xmq_light w40')
        {
            &SUGAR_XML;
        }
        p {
          'An xmq file can always be printed on a single line, without newlines: '
          span(class=code) = 'xmq shiporder.xml to_xmq --compact'
        }
        &SHIPORDER_XMQ_COMPACT;
        p {
            'Now let us try some htmq/html:'
            &nbsp;
            &nbsp;
            a(href=resources/welcome_traveller.htmq)=welcome_traveller.htmq
            &nbsp;
            &nbsp;
            a(href=resources/welcome_traveller.html)=welcome_traveller.html
        }

        p {
          'To view, pretty print and colorize, as xmq/htmq: '
          span(class=code) = 'xmq-less welcome_traveller.html'
        }
        &WELCOME_TRAVELLER_HTMQ;
        p {
          'Convert back to html: '
          span(class=code) = 'xmq welcome_traveller.htmq to_html'
        }
        pre(class = 'xmq xmq_light w40')
        {
            &WELCOME_TRAVELLER_NOPP_HTML;
        }
        ul {
            li = 'The xmq can be pretty printed without introducing space between traveller: and Click.'
            li = 'When generating xml/html from xmq the default is to not pretty print the xml/html.'
        }
        p {
          'Generate compact xmq/htmq: '
          span(class=code) = 'xmq welcome_traveller.html to_xmq --compact'
        }
        &WELCOME_TRAVELLER_HTMQ_COMPACT;
    }
}
