.TH XMQ 1
.SH NAME

xmq \- Command-line xmq/htmq/xml/html/json processor

.SH SYNOPSIS
\fBxmq\fP [options]
.br
\fBxmq\fP [options] <file>
.br
\fBxmq\fP [options] <file> ( <\fIcommand\fP> [options] )+
.br

.SH EXAMPLES

xmq pom.xmq         \fB# pretty print as xmq and colorize\fP
.br
xmq < pom.xml
.br
cat data.json | xmq
.br
xmq index.html
.br
xmq big.xml pa      \fB# use pager in terminal\fP
.br
xmq big.json br     \fB# view in default browser\fP
.br
xmq pom.xmq to-xml > pom.xml         \fB# convert to xml and save into pom.xml file\fP
.br
xmq data.xml to-json save data.json  \fB# save using xmq command instead\fP
.br
xmq index.html delete //script delete //style pa  \fB# delete script/style nodes then use pager\fP
.br
curl https://jsonandstuff/products | xmq - transform make_web_list.xslq to-html save products.html
.br
xmq input.json delete //work replace-entity VALUE $SPEED to-json | curl -H "Content-Type: application/json" -X POST --data-binary @- http://somewhere

.SH DESCRIPTION

The xmq tool can extract data from xmq/htmq/xml/html/json files and
convert between them.  It can also pretty print, compact, colorize,
tokenize, apply xslt transforms and other commands to modify the
content.

If no commands are provided then xmq executes the command \fIrender-terminal\fP or \fIto-xmq\fP
followed by \fIprint\fP depending on whether stdout is a tty or a file/pipe.

Xmq will read from stdin if a single minus \fB-\fP is provided as <file> or if neither <file> nor <command> is provided.

.SH OPTIONS

.TP
.BR \--root=<name>
Create a root node <name> unless the file starts with a node with this <name> already.

.TP
.BR --trim=[none|default|heuristic}
The default setting when reading xml/html content is to trim whitespace using \fBheuristic\fP.
When reading xmq/htmq/json then default settings is \fBnone\fP since whitespace is explicit in xmq/htmq/json.
.br
\fBnone\fP Keep all whitespace as is.
.br
\fBdefault\fP Use normal for xml/html and none for xmq/htmq/json.
.br
\fBheuristic\fP Remove leading ending whitespace and incidental indentation.

.TP
.BR \--version
Output the xmq version and exit with zero.

.TP
.BR \--xmq|--htmq|--xml|--html|--ixml|--json
The input format is normally auto detected but you can force the input format here.

.TP
.BR \-i "a=2"
Use the next argument as the content to parse.

.TP
.BR \-z
Do not read from stdin nor from a file. Start with an empty dom.

.SH COMMANDS

.TP
\fIbrowse/br\fP
Render a temporary html page and view it using the default browser.

.TP
\fIto-xmq\fP / \fIto-htmq\fP
Write the content as xmq/htmq. If stdout is a tty, then this command behaves as \fIrender-terminal\fP.

.br
\fB--compact\fP By default, \fIto-xmq\fP pretty-prints the output. Using this option will result in a single line compact xmq/htmq.

.br
\fB--indent=n\fP Use the given number of spaces for indentation. Default is 4.

.br
\fB--escape-newlines\fP Use the entity \fI&#10;\fP instead of actual newlines in xmq quotes. This is automatic in compact mode.

.br
\fB--escape-tabs\fP Use the entity \fI&#9;\fP instead of actual tabs in xmq quotes.

.br
\fB--escape-non-7bit\fP Escape all non-7bit chars using entities like \fI&#160;\fP.

.TP
\fIto-xml\fP/\fIto-html\FP/\fIto-json\fP
Write the content as xml/html/json.

.TP
\fIpage/pa\fP
Use the builtin pager to view the generated output from any of the to/render/tokenize commands.
You can use the following keys in the pager:
.br
q - quit
.br
enter - next line
.br
space - next page
.br
arrow down - next line
.br
arrow up - previous line
.br
page down or space - next page
.br
page up - previous page
.br
/ - start a search
.br
< - jump to beginning
.br
> - jump to end

.TP
\fIprint\fP
Print on stdout generated output from any of the to/render/tokenize commands.

.TP
\fIsave\fP <file_name>
Save the generated output from any of the to/render/tokenize commands to the provided file name.

.TP
\fIrender-terminal\fP / \fIrender-html\fP / \fIrender-tex\fP
This command will render the content as xmq/htmq for presentation at a terminal, as html or as LaTeX.

.br
\fB--color / --mono\fP By default, xmq generates syntax colored output if writing to a terminal.
You can force it to produce color even if writing to a pipe or a file using --color, and disable color with --mono.
Colors can be configured with the XMQ_COLORS environment variable (see below).

.br
\fB--id=abc\fP When rendering html mark the pre tag with this id.

.br
\fB--lightbg / --darkbg\fP Use a colorscheme suitable for a light background or a dark background.

.br
\fB--nostyle\fP Do not output html/tex preamble/postamble.

.br
\fB--onlystyle\fP Output only the html/tex preamble.

You can also use \fB--compact\fP, \fB--indent=n\fP, \fB--escape-newlines\fP and \fB--escape-non-7bit\fP with the render commands.

.TP
\fItokenize\fP
Do not create a DOM tree for the content, just tokenize the input. Each token can be printed using colors for terminal/html/tex or with location information or with debug information. Location information is useful for editors to get help on syntax highlighting.

.br
\fB--type=[location|terminal|tex|debugtokens|debugcontent]\fP

.TP
\fIselect\fP / \fIdelete\fP
Select or delete nodes in the DOM.

.br
\fB--xpath=<xpath-expression>\fP Select or delete nodes matching this xpath expression.

.br
\fB--entity=<entity-name>\fP Select or delete entity nodes matching this name.

.TP
\fIadd\fP <xmq>
Parse the xmq and append to the DOM.

.TP
\fIadd-root\fP <root-element-name>
Wrap the DOM with a new root node. Useful after a select which to get an XML compliant DOM.

.TP
\fIreplace\fP\fP
Replace parts of the DOM.

.br
\fB--xpath=<xpath-expression>\fP Replace nodes matching this xpath expression.

.br
\fB--entity=<entity-name>\fP Replace entity nodes matching this name.

.br
\fB--text=<text>\fP Replace with this text. The text is safely quoted for insertion into the document.

.br
\fB--textfile=<file-name>\fP Replace with the text from this file. The text is safely quoted for insertion into the document.

.br
\fB--file=<file-name>\fP Replace with the content of this file which has to be proper xmq/htmq/xml/html/json.

.TP
\fItransform\fP\fP
Transform the document using xslt. The xslt can of course be provided in xmq format.

.br
\fB--param=key=value\fP Provide value as non-quoted content to parameter key.

.br
\fB--stringparam=key=value\fP Provide value as quoted (single or double) content to parameter key.

.TP
\fIfor-each\fP\fP
Execute a shell command for each matchin xpath node. The children of the node are available as text, eg. In the shell command,
the text: ${name} will be replaced with the text content of the child node "name". This replacement happens before the shell
executes the command, ie it is not a shell variable.

.br
\fB--shell="shell-command ${name}"\fP Invoke /bin/sh -c "shell-command ${name}" for each match.

.SH EXAMPLES

.TP
Pretty print a document as xmq to the terminal using colors.

.br
% xmq file.xmq
.br
% xmq-less file.xml
.br
% xmq file.json

.TP
Delete nodes and pretty print.

.br
% xmq input.xml delete --entity=Greeting
.br
% xmq-less input.html delete --xpath=//script to-html
.br
% xmq-less input.html delete --xpath=//script render-terminal

.TP
Execute a shell command for each matching node.

.br
% xmq input.xml for-each /driver/test --shell='echo "${name}"'

.TP
Replace nodes and print.

.br
% xmq input.xml \\
.br
    replace --entity=Greeting --text='howdy' \\
.br
    replace --entity=Page --file=pagecontent.xmq
.br
% xmq input.xml replace --xpath=//div --file=newdiv.xmq

.TP
Select nodes and print.

.br
% xmq input.xml select //button

.TP
Transform document.

.br
% xmq input.xmq transform --xslt=toweb.xsltq to-html > index.html
.br
% xmq data.json replace --xpath=//work --textfile=work.txt \\
.br
                transform --xslt=restructure.xsltq to-json > work.json

.SH AUTHOR
Written by Fredrik Öhrström.

.SH COPYRIGHT
Copyright \(co 2019-2024 Fredrik Öhrström.
.br
License MIT
